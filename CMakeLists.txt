cmake_minimum_required(VERSION 3.10)
project(AutoAim)
set(CMAKE_CXX_STANDARD 20)
# 设置优化级别
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
# 设置输出目录
message(STATUS "CMAKE_SOURCE_DIR: ${CMAKE_SOURCE_DIR}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/bin)
message(STATUS "CMAKE_RUNTIME_OUTPUT_DIRECTORY: ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}")

# 导入外部库
# 创建一个接口库来共享第三方库
add_library(third_party_libs INTERFACE)
find_package(OpenCV REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(Boost CONFIG REQUIRED COMPONENTS system)
find_package(spdlog CONFIG REQUIRED)
find_package(OpenVINO REQUIRED)
find_package(Ceres REQUIRED)
add_compile_definitions(GLOG_NO_ABBREVIATED_SEVERITIES)
#target_link_libraries(third_party_libs INTERFACE ipopt)
#target_link_libraries(third_party_libs INTERFACE cppad_lib)
#target_link_libraries(third_party_libs INTERFACE /usr/local/lib/libcppad_lib.so)
#target_link_libraries(third_party_libs INTERFACE /usr/local/lib/libipopt.so)
#target_link_libraries(third_party_libs INTERFACE ipopt)
target_link_libraries(third_party_libs INTERFACE Boost::system)
target_link_libraries(third_party_libs INTERFACE spdlog::spdlog)
target_link_libraries(third_party_libs INTERFACE openvino::runtime)
target_link_libraries(third_party_libs INTERFACE Ceres::ceres)
target_link_libraries(third_party_libs INTERFACE ${OpenCV_LIBS} Eigen3::Eigen)
#target_include_directories(third_party_libs INTERFACE /usr/local/include/cppad)
target_include_directories(third_party_libs INTERFACE ${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/utils/include ${CMAKE_SOURCE_DIR}/modules)

find_library(GXIAPI_LIB NAMES gxiapi)
if(GXIAPI_LIB)
    message(STATUS "Found GXIAPI_LIB: ${GXIAPI_LIB}")
    target_link_libraries(third_party_libs INTERFACE ${GXIAPI_LIB})
else()
    message(FATAL_ERROR "GXIAPI_LIB not found")
endif()


# 包含子模块
# 创建一个接口库来共享模块库
add_library(modules_libs INTERFACE)
add_subdirectory(modules/buff)
add_subdirectory(modules/driver)
add_subdirectory(modules/detector)
add_subdirectory(modules/controller)
add_subdirectory(modules/solver)
add_subdirectory(modules/predictor)
add_subdirectory(modules/tracker)
add_subdirectory(modules/replayer)
add_subdirectory(modules/RecordSolver)
#add_subdirectory(modules/ControlOptimizer)
target_link_libraries(modules_libs INTERFACE buff)
target_link_libraries(modules_libs INTERFACE driver)
target_link_libraries(modules_libs INTERFACE detector)
target_link_libraries(modules_libs INTERFACE controller)
target_link_libraries(modules_libs INTERFACE solver)
target_link_libraries(modules_libs INTERFACE predictor)
target_link_libraries(modules_libs INTERFACE tracker)
target_link_libraries(modules_libs INTERFACE replayer)
target_link_libraries(modules_libs INTERFACE recordsolver)
#target_link_libraries(modules_libs INTERFACE control_optimizer)


# 创建可执行文件
add_executable(AutoAim AutoAim.cpp)
target_link_libraries(AutoAim PRIVATE third_party_libs modules_libs)
#add_executable(ControlOptimizerTest Optimize.cpp)
#target_link_libraries(ControlOptimizerTest PRIVATE third_party_libs modules_libs)
add_executable(Calib Calib.cpp)
target_link_libraries(Calib PRIVATE third_party_libs modules_libs)
#add_executable(RecordSolveData RecordSolveData.cpp)
#target_link_libraries(RecordSolveData PRIVATE third_party_libs modules_libs)
#add_executable(tempAutoAim tempAutoAim.cpp)
#target_link_libraries(tempAutoAim PRIVATE third_party_libs modules_libs)